package org.waterme7on.hbase;

import java.io.IOException;
import java.util.Map;

import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.TableDescriptor;

/**
 * Get, remove and modify table descriptors.
 */
public interface TableDescriptors {

    /**
     * Test whether a given table exists, i.e, has a table descriptor.
     */
    default boolean exists(TableName tableName) throws IOException {
        return get(tableName) != null;
    }

    /** Returns TableDescriptor for tablename */
    TableDescriptor get(TableName tableName) throws IOException;

    /**
     * Get Map of all NamespaceDescriptors for a given namespace.
     * 
     * @return Map of all descriptors.
     */
    Map<String, TableDescriptor> getByNamespace(String name) throws IOException;

    /**
     * Get Map of all TableDescriptors. Populates the descriptor cache as a side
     * effect.
     * </p>
     * Notice: the key of map is the table name which contains namespace. It was
     * generated by
     * {@link TableName#getNameWithNamespaceInclAsString()}.
     * 
     * @return Map of all descriptors.
     */
    Map<String, TableDescriptor> getAll() throws IOException;

    /**
     * Add or update descriptor. Just call {@link #update(TableDescriptor, boolean)}
     * with
     * {@code cacheOnly} as {@code false}.
     */
    default void update(TableDescriptor htd) throws IOException {
        update(htd, false);
    }

    /**
     * Add or update descriptor
     * 
     * @param htd       Descriptor to set into TableDescriptors
     * @param cacheOnly only add the given {@code htd} to cache, without updating
     *                  the storage. For
     *                  example, when creating table, we will write the descriptor
     *                  to fs when creating
     *                  the fs layout, so we do not need to update the fs again.
     */
    void update(TableDescriptor htd, boolean cacheOnly) throws IOException;

    /** Returns Instance of table descriptor or null if none found. */
    TableDescriptor remove(TableName tablename) throws IOException;
}
